<?php

namespace AppBundle\Game\AI;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-27 at 11:25:31.
 */
class MoveMakerTest extends \PHPUnit_Framework_TestCase {

    /**
     *
     * @var Board
     */
    private $board;

    /**
     * @var MoveMaker
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->board = new \AppBundle\Game\Board(10, 10);
        /*
          ........
          ........
          ..O.....
          ...O....
          ....O...
          ..#..O..
          .#...O..
          #....O..
          ........
         * O - white
         * # - black
         */
        $this->board->markField(2, 2, 'white');
        $this->board->markField(3, 3, 'white');
        $this->board->markField(4, 4, 'white');
        $this->board->markField(5, 5, 'white');
        $this->board->markField(5, 6, 'white');
        $this->board->markField(5, 7, 'white');

        $this->board->markField(2, 5, 'black');
        $this->board->markField(1, 6, 'black');
        $this->board->markField(0, 7, 'black');
        $movingPlayer = new \AppBundle\Game\Player();
        $movingPlayer->setColor('white');
        $opponent = new \AppBundle\Game\Player();
        $opponent->setColor('black');
        $this->object = new MoveMaker($this->board, $movingPlayer, $opponent);
    }

    /**
     * @covers AppBundle\Game\AI\MoveMaker::getNextMoveCoordinate
     */
    public function testGetNextMoveCoordinate() {
//        $move = $this->object->getNextMoveCoordinate();
//        $isCorrectMove = false;
//        if($move['x']==1 && $move['y']==1) {
//            $isCorrectMove = true;
//        }
//        if($move['x']==6 && $move['y']==6) {
//            $isCorrectMove = true;
//        }
//        $this->assertTrue($isCorrectMove, 'Move is inncorrect. Expected (1,1) or (6,6), given ('.$move['x'].','.$move['y'].')');
    }

}
