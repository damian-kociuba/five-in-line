<?php

namespace AppBundle\Game\BoardValue;

use AppBundle\Game\Board;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-27 at 10:28:51.
 */
class MaxLineLengthFinderTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var MaxPossibleLineLengthFinder
     */
    protected $object;

    /**
     * @var Board
     */
    private $board;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        /*
        ..........
        .O........
        .O........
        ..........
        OO.....O..
        .....OOO..
        ......#...
        O...#..#..
        O..#*...#.
        O...*.....
         * O - white
         * # - black
         * * - green (special color for tests)
         */
        $board = new Board(10,10);
        $board->markField(5, 5, 'white');
        $board->markField(6, 5, 'white');
        $board->markField(7, 5, 'white');
        
        $board->markField(7, 4, 'white');
        
        $board->markField(1, 1, 'white');
        $board->markField(1, 2, 'white');
        
        $board->markField(0, 7, 'white');
        $board->markField(0, 8, 'white');
        $board->markField(0, 9, 'white');
        
        $board->markField(0, 4, 'white');
        $board->markField(1, 4, 'white');
        
        //unfinishable descending line
        $board->markField(6, 6, 'black');
        $board->markField(7, 7, 'black');
        $board->markField(8, 8, 'black');
        
        //unfinishable ascending line
        $board->markField(3, 8, 'black');
        $board->markField(4, 7, 'black');
        
        //unfinishable line
        $board->markField(4, 8, 'green');
        $board->markField(4, 9, 'green');
        
        $this->object = new MaxPossibleLineLengthFinder($board);
    }

    /**
     * @covers AppBundle\Game\BoardValue\MaxLineLengthFinder::find
     */
    public function testFindCorrectNumberOfHorizontalLines() {
        $lines = $this->object->findAll(MaxPossibleLineLengthFinder::HORIZONTAL_DIRECTION, 'white');
        $this->assertCount(5, $lines);
    }
    /**
     * @covers AppBundle\Game\BoardValue\MaxLineLengthFinder::find
     */
    public function testFindCorrectNumberOfVerticalLines() {
        $lines = $this->object->findAll(MaxPossibleLineLengthFinder::VERTICAL_DIRECTION, 'white');
        $this->assertCount(6, $lines);
    }
    /**
     * @covers AppBundle\Game\BoardValue\MaxLineLengthFinder::find
     */
    public function testFindCorrectNumberOfAscendingLines() {
        //it's should find 1-length line consist (7,7)
        $lines = $this->object->findAll(MaxPossibleLineLengthFinder::ASCENDING_DIRECTION, 'black');
        $this->assertCount(1,$lines);
    }
    /**
     * @covers AppBundle\Game\BoardValue\MaxLineLengthFinder::find
     */
    public function testFindCorrectNumberOfDescendingLines() {
        //it's should find 1-length line consist (4,7)
        $lines = $this->object->findAll(MaxPossibleLineLengthFinder::DESCENDING_DIRECTION, 'black');
        $this->assertCount(1,$lines);
    }
    /**
     * @covers AppBundle\Game\BoardValue\MaxLineLengthFinder::find
     */
    public function testFindForUnpossibleToFinishLines() {
        $lines = $this->object->findAll(MaxPossibleLineLengthFinder::VERTICAL_DIRECTION, 'green');
        $this->assertCount(0,$lines);
    }

}
