<?php

namespace AppBundle\Game;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-13 at 12:57:00.
 */
class JudgeTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Judge
     */
    protected $object;

    /**
     * @var Player
     */
    private $firstPlayer;
    /**
     * @var Player
     */
    private $secondPlayer;
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Judge;
        $this->firstPlayer = new Player();
        $this->firstPlayer->setColor('white');
        $this->secondPlayer = new Player();
        $this->secondPlayer->setColor('black');
    }

    /**
     * @covers AppBundle\Game\Judge::check
     */
    public function testCheckFirstPlayerWinByHorizontalLine() {
        $board = new Board(10, 10);
        $board->markField(2, 6, $this->firstPlayer->getColor());
        $board->markField(3, 6, $this->firstPlayer->getColor());
        $board->markField(4, 6, $this->firstPlayer->getColor());
        $board->markField(5, 6, $this->firstPlayer->getColor());
        $board->markField(6, 6, $this->firstPlayer->getColor());
        
        $result = $this->object->check($board, $this->firstPlayer, $this->secondPlayer);
        $this->assertEquals(Judge::FIRST_PLAYER_WIN, $result);
    }
    /**
     * @covers AppBundle\Game\Judge::check
     */
    public function testCheckSecondPlayerWinByHorizontalLine() {
        $board = new Board(10, 10);
        $board->markField(2, 6, $this->secondPlayer->getColor());
        $board->markField(3, 6, $this->secondPlayer->getColor());
        $board->markField(4, 6, $this->secondPlayer->getColor());
        $board->markField(5, 6, $this->secondPlayer->getColor());
        $board->markField(6, 6, $this->secondPlayer->getColor());
        
        $result = $this->object->check($board, $this->firstPlayer, $this->secondPlayer);
        $this->assertEquals(Judge::SECOND_PLAYER_WIN, $result);
    }
    /**
     * @covers AppBundle\Game\Judge::check
     */
    public function testCheckVerticalLine() {
        $board = new Board(10, 10);
        $board->markField(6, 5, $this->secondPlayer->getColor());
        $board->markField(6, 6, $this->secondPlayer->getColor());
        $board->markField(6, 7, $this->secondPlayer->getColor());
        $board->markField(6, 8, $this->secondPlayer->getColor());
        $board->markField(6, 9, $this->secondPlayer->getColor());
        
        $result = $this->object->check($board, $this->firstPlayer, $this->secondPlayer);
        $this->assertEquals(Judge::SECOND_PLAYER_WIN, $result);
    }
    /**
     * @covers AppBundle\Game\Judge::check
     */
    public function testCheckDecreasingObliqueLine() {
        $board = new Board(10, 10);
        $board->markField(4, 5, $this->secondPlayer->getColor());
        $board->markField(5, 6, $this->secondPlayer->getColor());
        $board->markField(6, 7, $this->secondPlayer->getColor());
        $board->markField(7, 8, $this->secondPlayer->getColor());
        $board->markField(8, 9, $this->secondPlayer->getColor());
        
        $result = $this->object->check($board, $this->firstPlayer, $this->secondPlayer);
        $this->assertEquals(Judge::SECOND_PLAYER_WIN, $result);
    }
    /**
     * @covers AppBundle\Game\Judge::check
     */
    public function testCheckIncreasingObliqueLine() {
        $board = new Board(10, 10);
        $board->markField(4, 9, $this->secondPlayer->getColor());
        $board->markField(5, 8, $this->secondPlayer->getColor());
        $board->markField(6, 7, $this->secondPlayer->getColor());
        $board->markField(7, 6, $this->secondPlayer->getColor());
        $board->markField(8, 5, $this->secondPlayer->getColor());
        
        $result = $this->object->check($board, $this->firstPlayer, $this->secondPlayer);
        $this->assertEquals(Judge::SECOND_PLAYER_WIN, $result);
    }
    /**
     * @covers AppBundle\Game\Judge::check
     */
    public function testCheckIsContiueGame() {
        $board = new Board(10, 10);
        $board->markField(1, 0, $this->secondPlayer->getColor());
        $board->markField(2, 0, $this->secondPlayer->getColor());
        $board->markField(3, 0, $this->secondPlayer->getColor());
        $board->markField(4, 0, $this->secondPlayer->getColor());
        
        $board->markField(5, 0, $this->firstPlayer->getColor());
        
        $result = $this->object->check($board, $this->firstPlayer, $this->secondPlayer);
        $this->assertEquals(Judge::CONTINUE_PLAYING, $result);
    }
    /**
     * @covers AppBundle\Game\Judge::check
     */
    public function testCheckIsDraw() {
        
        $board = new Board(5, 5);
        
        $board->markField(0, 0, $this->secondPlayer->getColor());
        $board->markField(1, 2, $this->secondPlayer->getColor());
        $board->markField(2, 1, $this->secondPlayer->getColor());
        $board->markField(2, 2, $this->secondPlayer->getColor());
        $board->markField(3, 3, $this->secondPlayer->getColor());
        $board->markField(4, 4, $this->secondPlayer->getColor());
        
        //fill empty fields first player's color
        for($i=0; $i<5; $i++) {
            for($j=0; $j<5; $j++) {
                if($board->getByXY($j, $i)==null) {
                   $board->markField($j, $i, $this->firstPlayer->getColor()); 
                }
                
            }
        }
        
        
        $result = $this->object->check($board, $this->firstPlayer, $this->secondPlayer);
        $this->assertEquals(Judge::DRAW, $result);
    }

}
