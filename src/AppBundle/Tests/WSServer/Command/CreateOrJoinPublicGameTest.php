<?php

namespace AppBundle\WSServer\Command;

use AppBundle\ConfigContainer;
use AppBundle\Game\GamesRepository;
use AppBundle\Game\GameBuilderSupervisor;
use AppBundle\Game\GameBuilder\PublicGameBuilder;
use AppBundle\Game\PublicGame;
use AppBundle\Game\Player;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-06-17 at 09:19:19.
 */
class CreateOrJoinPublicGameTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var CreateOrJoinPublicGame
     */
    protected $object;

    /**
     *
     * @var Player
     */
    private $gameCreator;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $gamesRepository = new GamesRepository();
        $this->object = new CreateOrJoinPublicGame($gamesRepository, $this->prepareGameBuilder());
    }

    /**
     * @return ConfigContainer
     */
    private function prepareGameBuilder() {
        $config = new ConfigContainer(array(
            'boardWidth' => 20,
            'boardHeight' => 20
        ));
        
        $gameBuilder = new GameBuilderSupervisor($config);
        return $gameBuilder;
    }

    /**
     * @covers AppBundle\WSServer\Command\CreateOrJoinPublicGame::run
     */
    public function testRunJoinableGameBecomeUnjoinable() {
        $gamesRepository = new GamesRepository();
        $joinableGame = $this->prepareJoinableGame();
        $gamesRepository->attach($joinableGame);

        $command = new CreateOrJoinPublicGame($gamesRepository, $this->prepareGameBuilder());

        $message = new \AppBundle\WSServer\Message();
        $message->readFromArrayMessage(array(
            'command' => 'CreateOrJoinPublicGame',
            'parameters' => array(
                'playerName' => 'player'
            )
        ));
        $connection = new \AppBundle\Tests\WSServer\ConnectionMock();
        $message->setConnection($connection);
        $command->run($message);

        $this->assertFalse($joinableGame->isPossibleToJoin());
    }

    /**
     * @covers AppBundle\WSServer\Command\CreateOrJoinPublicGame::run
     */
    public function testRunSendToCreatorMessageAfterJoining() {
        $gamesRepository = new GamesRepository();
        $joinableGame = $this->prepareJoinableGame();
        $gamesRepository->attach($joinableGame);

        $command = new CreateOrJoinPublicGame($gamesRepository, $this->prepareGameBuilder());

        $message = new \AppBundle\WSServer\Message();
        $message->readFromArrayMessage(array(
            'command' => 'CreateOrJoinPublicGame',
            'parameters' => array(
                'playerName' => 'player'
            )
        ));
        $connection = new \AppBundle\Tests\WSServer\ConnectionMock();
        $message->setConnection($connection);

        $command->run($message);

        $creatorConnection = $this->gameCreator->getConnection();
        $sendedData = json_decode($creatorConnection->getSendedData(), true);
        $this->assertEquals('StartGame', $sendedData['command']);
        $this->assertInternalType('bool', $sendedData['parameters']['isPlayerTurn']);
    }

    /**
     * @covers AppBundle\WSServer\Command\CreateOrJoinPublicGame::run
     */
    public function testRunAddNewGameWhenThereIsNoJoinableGame() {
        $gamesRepository = new GamesRepository();
        $nonJoinableGame = $this->prepareNonJoinableGame();
        $gamesRepository->attach($nonJoinableGame);
        $command = new CreateOrJoinPublicGame($gamesRepository, $this->prepareGameBuilder());

        $message = new \AppBundle\WSServer\Message();
        $message->readFromArrayMessage(array(
            'command' => 'CreateOrJoinPublicGame',
            'parameters' => array(
                'playerName' => 'player'
            )
        ));
        $connection = new \AppBundle\Tests\WSServer\ConnectionMock();
        $message->setConnection($connection);

        $command->run($message);

        $this->assertCount(2, $gamesRepository);
    }

    /**
     * @return PublicGame
     */
    private function prepareJoinableGame() {
        $this->gameCreator = new Player();
        $creatorConnection = new \AppBundle\Tests\WSServer\ConnectionMock();
        $this->gameCreator->setConnection($creatorConnection);
        $gameBuilder = $this->prepareGameBuilder();
        $gameBuilder->setCreator($this->gameCreator);

        $joinableGame = $gameBuilder->createGame(new PublicGameBuilder());
        return $joinableGame;
    }

    private function prepareNonJoinableGame() {
        $game = $this->prepareJoinableGame();
        $secondPlayer = new Player();
        $game->addPlayer($secondPlayer);
        return $game;
    }

    /**
     * @covers AppBundle\WSServer\Command\CreateOrJoinPublicGame::getCommandName
     */
    public function testGetCommandName() {
        $this->assertEquals('CreateOrJoinPublicGame', $this->object->getCommandName());
    }

    /**
     * @covers AppBundle\WSServer\Command\CreateOrJoinPublicGame::validateParameters
     * @expectedException Exception
     */
    public function testValidateParameters() {
        $parameters = array(
        );
        $this->object->validateParameters($parameters);
    }

    /**
     * @covers AppBundle\WSServer\Command\CreateOrJoinPublicGame::getType
     */
    public function testGetType() {
        $this->assertEquals(WSCommandInterface::ON_MESSAGE_TYPE, $this->object->getType());
    }

}
