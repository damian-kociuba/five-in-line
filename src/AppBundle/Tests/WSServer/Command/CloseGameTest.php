<?php

namespace AppBundle\WSServer\Command;
use AppBundle\Game\GameSystem;
use AppBundle\WSServer\Message;
use AppBundle\Tests\WSServer\ConnectionMock;
/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-15 at 07:51:55.
 */
class CloseGameTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var CreatePrivateGame
     */
    protected $object;

    /**
     * @var Player
     */
    private $closingPlayer;

    /**
     * @var Player
     */
    private $secondPlayer;
    
    /**
     *
     * @var GameSystem
     */
    private $gameSystem;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->gameSystem = new GameSystem(array(
            'boardWidth' => 20,
            'boardHeight' => 20
        ));
        $this->closingPlayer = $this->gameSystem->createPlayer('closingPlayer');
        $this->secondPlayer = $this->gameSystem->createPlayer('secondPlayer');
        $this->closingPlayer->setConnection(new ConnectionMock());
        $this->secondPlayer->setConnection(new ConnectionMock());
        $game = $this->gameSystem->createPrivateGame($this->closingPlayer);
        $game->addPlayer($this->secondPlayer);
        $this->gameSystem->getGamesRepository()->attach($game);
        
        $this->object = new CloseGame($this->gameSystem);
    }

    /**
     * @covers AppBundle\WSServer\Command\CreatePrivateGame::run
     */
    public function testSendedToSecondPlayerExitMessageAfterRun() {
        $message = new Message();
        //there is no content of message
        $message->setConnection($this->closingPlayer->getConnection());
        
        $this->object->run($message);
        $messageToSecondPlayer = json_decode($this->secondPlayer->getConnection()->getSendedData(), true);
        $expectedMessage = array(
            'command' => 'CloseGame',
            'parameters' => array()
        );
        $this->assertEquals($expectedMessage, $messageToSecondPlayer);
    }
    /**
     * @covers AppBundle\WSServer\Command\CreatePrivateGame::run
     */
    public function testGameIsDestroyedAfterRun() {
        $message = new Message();
        //there is no content of message
        $message->setConnection($this->closingPlayer->getConnection());
        
        $this->object->run($message);
        $this->gameSystem->getGamesRepository()->count();
        $this->assertEquals(0, $this->gameSystem->getGamesRepository()->count(), 'GameRepository isnt empty after close game');
    }

    /**
     * @covers AppBundle\WSServer\Command\CreatePrivateGame::getCommandName
     */
    public function testGetCommandName() {
        $this->assertEquals('CloseGame', $this->object->getCommandName());
    }

    /**
     * @covers AppBundle\WSServer\Command\CreatePrivateGame::getType
     */
    public function testGetType() {
        $this->assertEquals(WSCommandInterface::ON_CLOSE_TYPE, $this->object->getType());
    }

}
