<?php

namespace AppBundle\WSServer\Command;

use Appbundle\ConfigContainer;
use AppBundle\Tests\WSServer\ConnectionMock;
use AppBundle\Game\Player;
use AppBundle\Game\Game;
use AppBundle\Game\PlayerBuilderSupervisor;
use AppBundle\Game\PlayerBuilder\HumanPlayerBuilder;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-05-11 at 10:29:50.
 */
class MakeMoveTest extends \PHPUnit_Framework_TestCase {

    const BOARD_WIDTH = 20;
    const BOARD_HEIGHT = 10;

    /**
     * @var MakeMove
     */
    protected $object;

    /**
     * @var Player
     */
    private $movingPlayer;

    /**
     * @var Player
     */
    private $secondPlayer;

    /**
     *
     * @var Game
     */
    private $game;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $config = new ConfigContainer(array(
            'boardWidth' => self::BOARD_WIDTH,
            'boardHeight' => self::BOARD_HEIGHT)
        );
        $gamesRepository = new \AppBundle\Game\GamesRepository($config);
        $playerBuilder = new PlayerBuilderSupervisor();
        
        $playerBuilder->setPlayerName('FirstPlayer');
        $this->movingPlayer = $playerBuilder->createPlayer(new HumanPlayerBuilder());
        $this->movingPlayer->setConnection(new ConnectionMock());
        $this->movingPlayer->setColor('white');
        
        $playerBuilder->setPlayerName('SecondPlayer');
        $this->secondPlayer = $playerBuilder->createPlayer(new HumanPlayerBuilder());
        $this->secondPlayer->setConnection(new ConnectionMock());
        $this->secondPlayer->setColor('black');
        $this->game = new Game(self::BOARD_WIDTH, self::BOARD_HEIGHT);
        $this->game->addPlayer($this->movingPlayer);
        $this->game->addPlayer($this->secondPlayer);
        $this->game->setFirstMovePlayer($this->movingPlayer);
        $gamesRepository->attach($this->game);

        $this->object = new MakeMove($gamesRepository);
    }

    /**
     * @covers AppBundle\WSServer\Command\MakeMove::run
     */
    public function testRunCheckNextMovingPlayerIsChanging() {
        $message = $this->prepareMessage();
        $this->object->run($message);
        $this->assertEquals($this->secondPlayer, $this->game->getNextMovingPlayer());
    }

    /**
     * @covers AppBundle\WSServer\Command\MakeMove::run
     */
    public function testRunCheckSendedMessageToSecondPlayer() {
        $message = $this->prepareMessage();
        $this->object->run($message);
        $secondPlayerMessage = json_decode($this->secondPlayer->getConnection()->getSendedData(), true);
        $expectedMessage = array(
            'command' => 'MoveMade',
            'parameters' => array(
                'x' => 5,
                'y' => 6,
                'isPlayerTurn' => true,
                'color' => $this->movingPlayer->getColor()
        ));
        $this->assertEquals(($expectedMessage), $secondPlayerMessage);
    }

    private function prepareMessage() {
        $message = new \AppBundle\WSServer\Message();
        $message->readFromArrayMessage(array(
            'command' => 'MakeMove',
            'parameters' => array('x' => 5, 'y' => 6)));
        $message->setConnection($this->movingPlayer->getConnection());
        return $message;
    }

    /**
     * @covers AppBundle\WSServer\Command\MakeMove::validateParameters
     * @expectedException Exception
     */
    public function testValidateParametersWhenXNonExists() {
        $parameters = array('y' => 10);
        $this->object->validateParameters($parameters);
    }

    /**
     * @covers AppBundle\WSServer\Command\MakeMove::validateParameters
     * @expectedException Exception
     */
    public function testValidateParametersWhenYNonExists() {
        $parameters = array('x' => 10);
        $this->object->validateParameters($parameters);
    }

}
